#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 3 14:10:01 2025

@author: gabriel.castejon
"""

import PRIMME as fsp
import functions as fs
import h5py 
import numpy as np
import matplotlib.pyplot as plt
import scipy.io
import torch
from matplotlib.patches import Rectangle
from tqdm import tqdm
import argparse

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

'''

How to run the program:

1. Ensure that plots and data directories are created in this directory.
2. Run the following command in the terminal:
    python run_primme.py

'''
def main(args):
    trainset = args.trainset
    num_eps = args.num_eps
    if not args.modelname:
        modelname = fsp.train_primme(trainset, num_eps=num_eps, obs_dim=args.obs_dim, act_dim=args.act_dim, lr=args.lr, reg=args.reg, if_miso=args.if_miso, plot_freq=args.plot_freq)
    else:
        modelname = args.modelname

    if not args.voroni_loaded:
        ic, ea, _ = fs.voronoi2image(size=[args.size, args.size, args.size], ngrain=args.ngrain)
        ma = fs.find_misorientation(ea, mem_max=1) 
        np.save("./data/ic.npy", ic), np.save("./data/ea.npy", ea), np.save("./data/ma.npy", ma)
    else:
        ic, ea, ma = np.load(args.ic), np.load(args.ea), np.load(args.ma)

    if args.multi_run:
        for epoch in range(0, num_eps - 1, 100):
            cur_model = f"{modelname[:-3]}_at_epoch({epoch}).h5"
            fp = fsp.run_primme(ic, ea, nsteps=args.nsteps, modelname=cur_model, miso_array=ma, pad_mode=args.pad_mode, if_miso=args.if_miso, plot_freq=args.plot_freq)
            fs.compute_grain_stats(fp)
            fs.make_videos(fp, multi_res=True, epoch=epoch)
            fs.make_time_plots(fp, multi_res=True, epoch=epoch)

    # Last one if multi-run, only one if not:
    fp = fsp.run_primme(ic, ea, nsteps=args.nsteps, modelname=modelname, miso_array=ma, pad_mode=args.pad_mode, if_miso=args.if_miso, plot_freq=args.plot_freq)

    fs.compute_grain_stats(fp)
    fs.make_videos(fp)
    fs.make_time_plots(fp)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="PRIMME Program Arguments.")

    # SPPARKS Related Arguments
    parser.add_argument("--trainset", type=str, default='./data/trainset_spparks_sz(93x93x93)_ng(256-256)_nsets(200)_future(4)_max(50)_kt(0.66)_freq(0.5)_cut(0).h5', help="Trainset provided.")
    # TODO: Include SPPARKS Running Instructions, we can see if venv solves the issue of spparks as the concern was it requiring a different python version as Spyder

    # PRIMME Model Related Arguments
    parser.add_argument("--modelname", action="store_true", help="Model provided.")
    # if not provided, these are the default values
    parser.add_argument("--num_eps", type=int, default=2000, help="Number of epochs.")
    parser.add_argument("--obs_dim", type=int, default=9, help="Observation dimension.")
    parser.add_argument("--act_dim", type=int, default=9, help="Action dimension.")
    parser.add_argument("--lr", type=float, default=5e-5, help="Learning rate.")
    parser.add_argument("--reg", type=int, default=1, help="Regularization.")
    parser.add_argument("--if_miso", action="store_true", help="If miso, used for both PRIMME model and run.")
    parser.add_argument("--plot_freq", type=int, default=1, help="Plot frequency, , used for both PRIMME model and run.")

    # voroni2image and miso Related Arguments
    parser.add_argument("--voroni_loaded", action="store_true", help="Voroni loaded.")
    parser.add_argument("--ic", type=str, default="./data/ic.npy", help="Initial condition.")
    parser.add_argument("--ea", type=str, default="./data/ea.npy", help="Euler angles.")
    parser.add_argument("--ma", type=str, default="./data/ma.npy", help="Misorientation angles.")
    # if not provided, these are the default values
    parser.add_argument("--size", type=list, default=93, help="Size of the image generated by voroni2image.")
    parser.add_argument("--dimension", type=int, default=3, help="Dimension of the image generated by voroni2image.")
    parser.add_argument("--ngrain", type=int, default=2**14, help="Number of grains generated by voroni2image.")

    # PRIMME Run Related Arguments
    parser.add_argument("--primme", type=str, default="./data/primme_sz(93x93x93)_ng(16384)_nsteps(1000)_freq(1)_kt(0.66)_freq(0.1)_cut(0).h5", help="PRIMME File was provided.")
    parser.add_argument("--multi_run", type=bool, default=False, help="Runs and saves the PRIMME model for every 100 epochs.")
    # if not provided, these are the default values
    parser.add_argument("--nsteps", type=int, default=200, help="Number of steps.")
    parser.add_argument("--pad_mode", type=str, default="circular", help="Padding mode.")
    
    args = parser.parse_args()
    main(args)